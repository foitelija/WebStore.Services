@inject ISyncLocalStorageService LocalStorage
@inject ICartService CartService
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@implements IDisposable

<BlazoredTypeahead SearchMethod="@SearchProduct"
					TValue="Product"
					TItem="Product"
					Value="selectedProduct"
					ValueChanged="HandleSearch"
					ValueExpression="@(()=>selectedProduct)"
					placeholder="Search...">

	<SelectedTemplate>
		@context.Title
	</SelectedTemplate>
	<ResultTemplate>
		@context.Title
	</ResultTemplate>
	<NotFoundTemplate>
		Извините, ничего не найдено(
	</NotFoundTemplate>
</BlazoredTypeahead>

<a href="cart" class="btn btn-info"  style="background: lightgreen; color: green">
	<i class="oi oi-cart" style="color: green"></i>
	Cart
	<span class="badge badge-pill badge-light">@GetProductCount()</span>
</a>

@code {
	private Product selectedProduct;
	protected override void OnInitialized()
	{
		CartService.OnChange += StateHasChanged;
	}

	public void Dispose()
	{
		CartService.OnChange -= StateHasChanged;
	}

	private int GetProductCount()
	{
		var cart = LocalStorage.GetItem<List<ProductVariant>>("cart");
		return cart != null ? cart.Count : 0;
	}

	private void HandleSearch(Product product)
	{
		if (product == null) return;
		selectedProduct = product;
		NavigationManager.NavigateTo($"product/{selectedProduct.Id}");
	}

	private async Task<IEnumerable<Product>> SearchProduct(string searchText)
	{
		var response = await ProductService.SearchProducts(searchText);
		return response;
	}
}
