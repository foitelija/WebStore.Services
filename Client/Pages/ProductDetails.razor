@page "/product/{id:int}";
@using BlazorShop.Shared
@inject HttpClient Http
@inject IJSRuntime jsr
@inject IProductService ProductService
@inject ICartService CartService
@inject ILocalStorageService LocalStorage
@inject IToastService ToastService

@if (string.IsNullOrEmpty(userdata))
{
	<p><a href="/login">LOGIN TO ACCESS THIS DATA</a></p>
}
else
{
	<div class="media">
	<div class="media-img-big-wrapper mr-2">
		<img class="media-img-big" src="@product.Image" alt="@product.Title" />
	</div>

	<div class = "media-body">
		<h2 class="mb-0">@product.Title</h2>
		<p>@product.Description</p>
		@if(product.Variants != null && product.Variants.Count > 1)
		{
			<div class="form-group">
				<select class="form-control" @bind="currentEditionId">
					@foreach(var variant in product.Variants)
					{
						<option value="@variant.EditionId">@variant.Edition.Name</option>
					}
				</select>
			</div>
		}
		@if(GetSelectedVariant() != null )
		{
			@if(GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
			{
				<h6 class="text-muted original-price">$@GetSelectedVariant().OriginalPrice</h6>
			}
			<h4 class="price">
				$@GetSelectedVariant().Price
			</h4>
		}
		<EditForm Model="cartItem">
			<div class="form-group">
				<InputNumber id="quantity" min="1" max="100" @bind-Value="cartItem.Quantity" class="form-control" style="width: 70px;" /> 
			</div>
		</EditForm>

		<button class="btn btn-primary" @onclick="AddToCart"> <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Добавить в корзину</button>
	</div>
</div>
}


@code {
	string userdata;
	private Product product = new Product();
	private int currentEditionId = 1;

	private CartItem cartItem = new CartItem {Quantity = 1};

	[Parameter]
	public int Id { get; set; }

	private async Task<string> GetJWT()
	{
		userdata = await jsr.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
		if (!string.IsNullOrWhiteSpace(userdata))
		{
			var dataArray = userdata.Split(';', 2);
			if (dataArray.Length == 2)
				return dataArray[1];
		}
		return null;
	}

	protected override async Task OnParametersSetAsync()
	{
			var requestMsg = new HttpRequestMessage(HttpMethod.Get, $"/api/weatherforecast/{DateTime.Now.ToString("yyyy-MM-dd")}");
			requestMsg.Headers.Add("Authorization", "Bearer " + await GetJWT());
			var response = await Http.SendAsync(requestMsg);
			if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized) // NOTE: THEN TOKEN HAS EXPIRED
			{
				await jsr.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
				userdata = null;
			}

			else if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
				product = null;
			else if (response.IsSuccessStatusCode)
			{
			product = await ProductService.GetProduct(Id);
				if(product.Variants.Count > 0)
				{
						currentEditionId = product.Variants[0].EditionId;
				}
			}
	}
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		try
		{
			var requestMsg = new HttpRequestMessage(HttpMethod.Get, "/api/product");
			requestMsg.Headers.Add("Authorization", "Bearer " + await GetJWT());
			var response = await Http.SendAsync(requestMsg);
			if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized) // NOTE: THEN TOKEN HAS EXPIRED
			{
				await jsr.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
				userdata = null;
			}
			else if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
				product = null;
			else if (response.IsSuccessStatusCode)
				product = await ProductService.GetProduct(Id);
		}
		catch (Exception ex)
		{

		}
	}

	private ProductVariant GetSelectedVariant()
	{
		var variant = product.Variants.FirstOrDefault(v => v.EditionId == currentEditionId);
		return variant;
	}

	private async Task AddToCart()
	{
		var productVariant = GetSelectedVariant();
		cartItem.EditionId = productVariant.EditionId;
		cartItem.EditionName = productVariant.Edition.Name;
		cartItem.Image = product.Image;
		cartItem.Price = productVariant.Price;
		cartItem.ProductId = productVariant.ProductId;
		cartItem.ProductTitle = product.Title;
		await CartService.AddToCart(cartItem);
	}
}
