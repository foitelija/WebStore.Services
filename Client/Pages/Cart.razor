@page "/cart"
@inject ICartService CartService
@inject NavigationManager NavigationManager

@if (!orderPlaced)
{
	<h3>Корзина</h3>
	@if(cartItems == null || cartItems.Count <= 0)
{
	<span>У вас пустая корзина :(</span>
} 
else
{
	<div>
		@foreach(var item in cartItems)
		{
			<div class="item-container">
			<div class="item-image-wrapper"><img src="@item.Image" class="item-image"/></div>
			<div class="item-name">
				<h5><a href="/product/@item.ProductId">@item.ProductTitle</a></h5>
				<span>@item.EditionName</span><br>
				<button class="btn-delete" @onclick="@(()=>DeleteItem(item))">Убрать</button>
				
				<EditForm Model="item">
					<InputNumber id="quantity" min="1" max="100" @bind-Value="item.Quantity" class="form-control" style="width: 70px" />
				</EditForm>

			</div>
			<div class="item-price">$@(item.Price * item.Quantity)</div>
			</div>
		}
		<div class="item-price">
			Всего: (@cartItems.Count): $@cartItems.Sum(item => item.Price * item.Quantity)
		</div>
		<div style="text-align: center; margin-top: 10px">
			<button class="btn btn-primary btn-lg" @onclick="PlaceOrder">Оформить заказ.</button>
		</div>
	</div>
	}
}
else
{
	<h3>Спасибо за ваш заказ!</h3>
	<h4>Ваш заказ: </h4>
	<div>
		@foreach(var item in cartItems)
		{
			<div class="item-container">
			<div class="item-image-wrapper"><img src="@item.Image" class="item-image"/></div>
			<div class="item-name">
				<h5><a href="/product/@item.ProductId">@item.ProductTitle</a></h5>
				<span>@item.EditionName</span><br>
			</div>
			<div class="item-price">$@(item.Price * item.Quantity)</div>
			</div>
		}
		<div class="item-price">
			Всего: (@cartItems.Count): $@cartItems.Sum(item => item.Price * item.Quantity)
		</div>
	</div>
}

@code {
	List<CartItem> cartItems;
	bool orderPlaced = false;

	protected override async Task OnInitializedAsync()
	{
		cartItems = await CartService.GetCartItems();
	}

	private async Task DeleteItem(CartItem item)
	{
		await CartService.DeleteItem(item);
		cartItems = await CartService.GetCartItems();
	}

	private async Task PlaceOrder()
	{
		string checkoutUrl = await CartService.CheckOut();
		NavigationManager.NavigateTo(checkoutUrl);
		//orderPlaced = true;
		await CartService.EmptyCart();
	}
}
